name: Update Yale Football Calendar

on:
  schedule:
    # Run at 8am ET (12pm UTC) and 8pm ET (12am UTC) for better coverage
    - cron: '0 12 * * *'
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual trigger through GitHub UI

# Add permissions for writing to the repository
permissions:
  contents: write

jobs:
  update-calendar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history to avoid issues
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 ics flask apscheduler python-dateutil
          
      - name: Create update script
        run: |
          cat > update_calendar.py << 'EOF'
          import requests
          from bs4 import BeautifulSoup
          import ics
          from ics import Calendar, Event
          import datetime
          import logging
          import sys
          import os
          import re
          
          # Import required functions from the main script
          sys.path.append('.')
          try:
              from Script import (get_current_season, parse_date_time, create_calendar, 
                                scrape_schedule, validate_schedule, EXPECTED_GAMES_PER_SEASON, MIN_GAMES_THRESHOLD)
          except ImportError as e:
              print(f"Import error: {e}")
              print("Cannot proceed without main script functions")
              sys.exit(1)
          
          # Configure basic logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
          )
          logger = logging.getLogger("calendar_updater")
          
          # Run the update process
          logger.info("Starting calendar update...")
          
          try:
              # Get current season and update the calendar
              current_season = get_current_season()
              logger.info(f"Updating calendar for season {current_season}")
              
              # Scrape the schedule (tries Yale first, then ESPN - no fallback)
              games = scrape_schedule(current_season)
              
              if not games:
                  logger.error("No games found from any source - scraping failed")
                  print("ERROR: Schedule scraping failed - no games found")
                  print("This indicates the scraping logic needs to be updated")
                  sys.exit(1)
              
              # Validate schedule quality
              expected_count = EXPECTED_GAMES_PER_SEASON.get(current_season, MIN_GAMES_THRESHOLD)
              if len(games) < expected_count:
                  logger.error(f"Insufficient games found: {len(games)} < {expected_count}")
                  print(f"ERROR: Only found {len(games)} games, expected at least {expected_count}")
                  print("This indicates incomplete scraping - parser may need updates")
                  sys.exit(1)
              
              # Additional validation
              if not validate_schedule(games, current_season):
                  logger.error("Schedule failed validation checks")
                  print("ERROR: Schedule validation failed")
                  print("Games found but they appear to have parsing errors")
                  sys.exit(1)
              
              # Create the calendar
              cal = create_calendar(games)
              
              logger.info(f"Calendar updated successfully with {len(games)} games")
              
              # Print summary for GitHub Actions log
              print(f"\\n=== CALENDAR UPDATE SUCCESS ===")
              print(f"Season: {current_season}")
              print(f"Games found: {len(games)}")
              print("Games:")
              for game in games:
                  print(f"  - {game['title']} ({game['start'].strftime('%m/%d/%Y %I:%M %p')})")
              print("================================\\n")
              
              # Verify the calendar file was created and has content
              if os.path.exists("yale_football.ics"):
                  with open("yale_football.ics", 'r') as f:
                      content = f.read()
                      if len(content) > 100:  # Basic sanity check
                          event_count = content.count("BEGIN:VEVENT")
                          if event_count >= expected_count:
                              print(f"Calendar file created successfully with {event_count} events")
                              sys.exit(0)
                          else:
                              print(f"Calendar has only {event_count} events, expected {expected_count}")
                              sys.exit(1)
                      else:
                          print("Calendar file too small, may be corrupted")
                          sys.exit(1)
              else:
                  print("Calendar file was not created")
                  sys.exit(1)
              
          except Exception as e:
              logger.error(f"Error updating calendar: {str(e)}")
              print(f"ERROR: {str(e)}")
              sys.exit(1)
          EOF
          
      - name: Run update script
        run: python update_calendar.py
        
      - name: Verify calendar file
        run: |
          if [ ! -f "yale_football.ics" ]; then
            echo "ERROR: Calendar file not found"
            exit 1
          fi
          
          # Check file size
          filesize=$(wc -c < yale_football.ics)
          if [ $filesize -lt 100 ]; then
            echo "ERROR: Calendar file too small ($filesize bytes)"
            exit 1
          fi
          
          # Check for basic iCal structure
          if ! grep -q "BEGIN:VCALENDAR" yale_football.ics; then
            echo "ERROR: Invalid iCal format"
            exit 1
          fi
          
          # Count events and validate
          event_count=$(grep -c "BEGIN:VEVENT" yale_football.ics)
          echo "Calendar contains $event_count events"
          
          # Check if we have reasonable number of events for the current season
          current_year=$(date +%Y)
          current_month=$(date +%m)
          
          # Determine expected season
          if [ $current_month -gt 2 ]; then
            season=$current_year
          else
            season=$((current_year - 1))
          fi
          
          # Expected games (Yale typically plays 10 games)
          expected_games=10
          min_games=8
          
          if [ $event_count -lt $min_games ]; then
            echo "ERROR: Calendar has only $event_count events, expected at least $min_games"
            echo "This indicates scraping failure - the parser needs to be fixed"
            exit 1
          elif [ $event_count -lt $expected_games ]; then
            echo "WARNING: Calendar has only $event_count events, expected $expected_games"
            echo "This may indicate incomplete scraping"
          fi
          
          echo "Calendar file validation passed"
        
      - name: Check for calendar changes
        id: calendar-changes
        run: |
          if git diff --quiet yale_football.ics; then
            echo
